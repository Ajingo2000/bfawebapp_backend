"""
Django settings for bfaWeb project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv
# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-eama9+-+pu8op@dby^bi^^pwc-sg!%3qeua$tjlqo#j$tnoy^g"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# settings.py
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,  # Adjust as needed
}

# REST_FRAMEWORK = {
#     "DEFAULT_AUTHENTICATION_CLASSES": (
#         "rest_framework_simplejwt.authentication.JWTAuthentication",
#     ),
#     "DEFAULT_PERMISSION_CLASSES": [
#         "rest_framework.permissions.IsAuthenticated",
#     ],
# }

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
}


# Application definition

INSTALLED_APPS = [
     "unfold",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "social_django",
    "tinymce",
    "crispy_forms",
    "crispy_bootstrap5",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.github",
    "allauth.socialaccount.providers.google",
    "corsheaders",
    "storages",
    "bfaWebApp",
    "bfaWebBlog",
    "bfaNewsletter",
    "bfaSermons",
    "rest_framework",
    "django_summernote",
    "django_quill",
]

# settings for upload handler for the progress bar 
# FILE_UPLOAD_HANDLERS = (
#     "progressbarupload.uploadhandler.ProgressBarUploadHandler",
# )
LOGIN_REDIRECT_URL = '/'
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "social_django.middleware.SocialAuthExceptionMiddleware",  # added this #Social App Custom Settings
    # Add the account middleware:
    "allauth.account.middleware.AccountMiddleware",
    'whitenoise.middleware.WhiteNoiseMiddleware',
]


ROOT_URLCONF = "bfaWeb.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        'DIRS': [
            os.path.join(BASE_DIR, 'build'),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "social_django.context_processors.backends",  # added this #Social App Custom Settings
                # `allauth` needs this from django
                "django.template.context_processors.request",
            ],
        },
    },
]

WSGI_APPLICATION = "bfaWeb.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# ADDING THE VARIABLES FOR THE EXTERNAL CSS FILES HERE FIRST!
dbName = os.getenv("DB_NAME")
dbUser =  os.getenv("DB_USER")
dbPwd = os.getenv("DB_PWD")
dbHost = os.getenv("DB_HOST")
dbPort =  os.getenv("DB_PORT")

# # DJANGO HEROKU SETTINGS
# import django_heroku
# django_heroku.settings(locals())

import dj_database_url


DATABASE_URL = os.getenv("DATABASE_URL")

DATABASES = {
    "default": dj_database_url.config(default=DATABASE_URL, conn_max_age=1800),
}

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",
#         #  'NAME': BASE_DIR / 'db.sqlite3',
#          "NAME": dbName,
#          "USER": dbUser,
#          "PASSWORD": dbPwd,
#          "HOST": dbHost,
#         "PORT": dbPort,   
#     }
# }


# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",
#         #  'NAME': BASE_DIR / 'db.sqlite3',
#          "NAME": "web_db",
#          "USER": "postgres",
#          "PASSWORD": "postgres",
#          "HOST": "localhost",
#         "PORT": "5432",
#     }
# }

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         'NAME': BASE_DIR / 'db.sqlite3',
        
#     }
# }



# print(os.getenv("DB_PORT"))

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/


# STATIC_URL = "static/"
# # Add the path to your React build folder
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'build/static'),
# ]

# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# STATIC_URL = '/static/'
# # Simplified static file serving.
# # https://warehouse.python.org/project/whitenoise/
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# # Default primary key field type
# # https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

X_FRAME_OPTIONS = "ALLOWALL"
SUMMERNOTE_THEME = "bs5"

CORS_ALLOW_HEADERS = [
    'Content-Type',
    'Authorization',
]
CORS_ALLOW_METHODS = (
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
)
# CORS_ORIGIN_ALLOW_ALL = True 
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:3001",
    "http://127.0.0.1:3001",
    "https://bfa-react-frontend.vercel.app",
    "https://giraffe-active-forcibly.ngrok-free.app",
    "https://aedcf7aa-bddf-470d-b5ba-a15cef109669.e1-eu-north-azure.choreoapps.dev",
    "https://storage.googleapis.com",
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    
]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "https://bfa-react-frontend.vercel.app",
    "https://giraffe-active-forcibly.ngrok-free.app",
    "https://aedcf7aa-bddf-470d-b5ba-a15cef109669.e1-eu-north-azure.choreoapps.dev",
    "https://storage.googleapis.com",
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]
# Ensure you have the CSRF_TRUSTED_ORIGINS if needed

SITE_ID = 2

# Social App Custom Settings
AUTHENTICATION_BACKENDS = [
    "social_core.backends.google.GoogleOAuth2",
    "django.contrib.auth.backends.ModelBackend",
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by email
    "allauth.account.auth_backends.AuthenticationBackend",
]

# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
        "OAUTH_PKCE_ENABLED": True,
    }
}


LOGIN_URL = "login"
LOGIN_REDIRECT_URL = "home"
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = (
    "6086072578-e0154ud3dlvnd7c28v4euq1na2akju9p.apps.googleusercontent.com"
)
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = "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"

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_HOST_USER = "ajingo1738@gmail.com"
EMAIL_HOST_PASSWORD = "oreu orju wpgs ffzb"
EMAIL_USE_TLS = True
EMAIL_PORT = 587



# GOOGLE CLOUD SERVICES AND STORAGE CONFIGS HERE BELOW 
import os
import json
from google.oauth2 import service_account

# Google Cloud Storage settings
GS_BUCKET_NAME = os.getenv("GS_BUCKET_NAME", "bfa-backend-api")
GS_PROJECT_ID = os.getenv("GS_PROJECT_ID", "vivid-union-430420-t2")

# Load the credentials from environment variable
GS_CREDENTIALS_JSON = os.getenv('GS_CREDENTIALS_JSON')
if GS_CREDENTIALS_JSON:
    GS_CREDENTIALS_INFO = json.loads(GS_CREDENTIALS_JSON)
    GS_CREDENTIALS = service_account.Credentials.from_service_account_info(GS_CREDENTIALS_INFO)
else:
    GS_CREDENTIALS = None

# Static files (CSS, JavaScript, images)
STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
STATIC_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/bfaWeb/static/'

# Media files (uploads)
DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/bfaWeb/media/'

# Optionally, set cache control headers
GS_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}

